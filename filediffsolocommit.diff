org.slf4jslf4j-simple${slf4j.version}testclass ClassFreeUberspect extends Uberspect {ClassFreeUberspect() {super(null, null);}public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {return "class".equals(identifier) ? null : super.getPropertyGet(obj, identifier);}public JexlMethod getMethod(final Object obj, final String method, final Object... args) {return "getClass".equals(method) ? null : super.getMethod(obj, method, args);}Collections.,   PropertyDescriptor,  synchronizedMap(new HashMap,   PropertyDescriptor,  ());Collections.synchronizedMap(new HashMap,   PropertyDescriptor,  ());uberspect(new ClassFreeUberspect()).uberspect(new SandboxUberspect()).class SandboxUberspect extends Uberspect {private static final  String> COLLECTION_METHODS = Collections.unmodifiableSet(new Hash >(Arrays.asList("contains", "containsAll", "isEmpty", "size", "iterator", "toString")));private static final  String> LIST_METHODS = Collections.unmodifiableSet(new Hash >(Arrays.asList("get", "indexOf", "lastIndexOf", "toString")));private static final  String> MAP_METHODS = Collections.unmodifiableSet(new Hash >(Arrays.asList("get", "getOrDefault", "containsKey", "containsValue", "toString")));SandboxUberspect() {super(LogFactory.getLog(JexlEngine.class), JexlUberspect.JEXL_STRATEGY);}public JexlMethod getConstructor(final Object ctorHandle, final Object... args) {return null;}public JexlMethod getMethod(final Object obj, final String method, final Object... args) {if (obj instanceof AnyTO || obj instanceof Any|| obj instanceof PlainAttr || obj instanceof Attr|| obj instanceof MembershipTO || obj instanceof Membership|| obj instanceof Realm || obj instanceof RealmTO) {return super.getMethod(obj, method, args);} else if (obj instanceof SyncopeJexlFunctions) {return super.getMethod(obj, method, args);} else if (obj instanceof Optional) {return super.getMethod(obj, method, args);} else if (obj.getClass().isArray()) {return super.getMethod(obj, method, args);} else if (obj instanceof String) {return super.getMethod(obj, method, args);} else if (obj instanceof Date || obj instanceof Instant) {return super.getMethod(obj, method, args);} else if (obj instanceof Map && MAP_METHODS.contains(method)) {return super.getMethod(obj, method, args);} else if (obj instanceof List && (LIST_METHODS.contains(method) || COLLECTION_METHODS.contains(method))) {return super.getMethod(obj, method, args);} else if (obj instanceof Collection && COLLECTION_METHODS.contains(method)) {return super.getMethod(obj, method, args);}return null;}public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {return null;}public JexlPropertySet getPropertySet(final List resolvers, final Object obj, final Object identifier, final Object arg) {return null;}private MailTemplateDAO mailTemplateDAO;private static final String CONFIRM_PASSWORD_RESET_TEMPLATE =""+ "Hi, we are happy to inform you that the password request was successfully executed for "+ "your account.  Best regards.  ";private static final String REQUEST_PASSWORD_RESET_TEMPLATE = "Hi, a password reset was request for "+ "${user.getUsername()}.  In order to complete this request, you need to visit this link: "+ "http://localhost:9080/syncope-enduser/app/#!/confirmpasswordreset?token="+ "${input.get(0).replaceAll(' ', '%20')}"+ "If you did not request this reset, just ignore the present e-mail.  Best regards.";private static final String OPTIN_TEMPLATE ="  Hi ${user.getPlainAttr(\"firstname\").get().values[0]} "+ "${user.getPlainAttr(\"surname\").get().values[0]}, welcome to Syncope!"+ " Your username is ${user.username}."+ "Your email address is ${user.getPlainAttr(\"email\").get().values[0]}."+ "Your email address inside a <a href=\"http://localhost/?email="+ "This message was sent to the following recipients: \n $$ for (recipient: recipients) {\n"+ "   ${recipient.getPlainAttr(\"email\").get().values[0]}\n $$ }\n \n"+ "  because one of the following events occurred: \n $$ for (event: events) {\n"+ "   ${event}\n $$ }\n \n  \n $$ if (!empty(user.memberships)) {\n"+ " You have been provided with the following groups:\n \n"+ " $$ for(membership : user.memberships) {\n   ${membership.groupName}\n $$ }\n"+ " \n $$ }\n  ";String htmlBody = evaluate(mailTemplateDAO.find("confirmPasswordReset").getHTMLTemplate(),new HashMap());String htmlBody = evaluate(CONFIRM_PASSWORD_RESET_TEMPLATE, new HashMap());String htmlBody = evaluate(mailTemplateDAO.find("requestPasswordReset").getHTMLTemplate(),ctx);String textBody = evaluate(REQUEST_PASSWORD_RESET_TEMPLATE, ctx);assertNotNull(htmlBody);assertTrue(htmlBody.contains("a password reset was request for " + username + '.'));assertFalse(htmlBody.contains("http://localhost:9080/syncope-enduser/confirmpasswordreset?token="assertNotNull(textBody);assertTrue(textBody.contains("a password reset was request for " + username + "."));assertFalse(textBody.contains("http://localhost:9080/syncope-enduser/app/#!/confirmpasswordreset?token="assertTrue(htmlBody.contains("http://localhost:9080/syncope-enduser/confirmpasswordreset?token="assertTrue(textBody.contains("http://localhost:9080/syncope-enduser/app/#!/confirmpasswordreset?token="String htmlBody = evaluate(mailTemplateDAO.find("optin").getHTMLTemplate(),ctx);ctx.put("events", List.of("event1"));String htmlBody = evaluate(OPTIN_TEMPLATE, ctx);assertTrue(htmlBody.contains("event1"));private ExternalResourceDAO resourceDAO;private AnyTypeDAO anyTypeDAO;private RealmDAO realmDAO;private UserDAO userDAO;ExternalResource ldap = resourceDAO.find("resource-ldap");assertNotNull(ldap);Provision provision = ldap.getProvision(anyTypeDAO.findUser()).get();assertNotNull(provision);assertNotNull(provision.getMapping());assertNotNull(provision.getMapping().getConnObjectLink());Realm realm = mock(Realm.class);when(realm.getFullPath()).thenReturn("/even");User user = userDAO.findByUsername("rossini");User user = mock(User.class);when(user.getUsername()).thenReturn("rossini");when(user.getRealm()).thenReturn(realm);JexlUtils.addPlainAttrsToContext(user.getPlainAttrs(), jexlContext);assertEquals("uid=rossini,ou=people,o=isp",JexlUtils.evaluate(provision.getMapping().getConnObjectLink(), jexlContext));String connObjectLink = "'uid=' + username + ',ou=people,o=isp'";assertEquals("uid=rossini,ou=people,o=isp", JexlUtils.evaluate(connObjectLink, jexlContext));String connObjectLink = "'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'";connObjectLink = "'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'";Realm realm = realmDAO.findByFullPath("/even/two");Realm realm = mock(Realm.class);when(realm.getFullPath()).thenReturn("/even/two");realm = realmDAO.findByFullPath("/even");when(realm.getFullPath()).thenReturn("/even");model.put("group", anyObjectDataBinder.getAnyObjectTO((AnyObject) any, true));model.put("anyObject", anyObjectDataBinder.getAnyObjectTO((AnyObject) any, true));