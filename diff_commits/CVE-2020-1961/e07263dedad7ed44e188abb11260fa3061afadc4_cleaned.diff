class ClassFreeUberspect extends Uberspect {ClassFreeUberspect() {super(null, null);}public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {return "class".equals(identifier) ? null : super.getPropertyGet(obj, identifier);}public JexlMethod getMethod(final Object obj, final String method, final Object... args) {return "getClass".equals(method) ? null : super.getMethod(obj, method, args);}uberspect(new ClassFreeUberspect()).uberspect(new SandboxUberspect()).class SandboxUberspect extends Uberspect {private static final Set COLLECTION_METHODS = Collections.unmodifiableSet(new HashSet(Arrays.asList("contains", "containsAll", "isEmpty", "size", "iterator", "toString")));private static final Set LIST_METHODS = Collections.unmodifiableSet(new HashSet(Arrays.asList("get", "indexOf", "lastIndexOf", "toString")));private static final Set MAP_METHODS = Collections.unmodifiableSet(new HashSet(Arrays.asList("get", "getOrDefault", "containsKey", "containsValue", "toString")));SandboxUberspect() {super(LogFactory.getLog(JexlEngine.class), JexlUberspect.JEXL_STRATEGY);}public JexlMethod getConstructor(final Object ctorHandle, final Object... args) {return null;}public JexlMethod getMethod(final Object obj, final String method, final Object... args) {if (obj instanceof AnyTO || obj instanceof Any|| obj instanceof PlainAttr || obj instanceof AttrTO|| obj instanceof MembershipTO || obj instanceof Membership|| obj instanceof Realm || obj instanceof RealmTO) {return super.getMethod(obj, method, args);} else if (obj instanceof SyncopeJexlFunctions) {return super.getMethod(obj, method, args);} else if (obj instanceof Optional) {return super.getMethod(obj, method, args);} else if (obj.getClass().isArray()) {return super.getMethod(obj, method, args);} else if (obj instanceof String) {return super.getMethod(obj, method, args);} else if (obj instanceof Date || obj instanceof Instant) {return super.getMethod(obj, method, args);} else if (obj instanceof Map && MAP_METHODS.contains(method)) {return super.getMethod(obj, method, args);} else if (obj instanceof List && (LIST_METHODS.contains(method) || COLLECTION_METHODS.contains(method))) {return super.getMethod(obj, method, args);} else if (obj instanceof Collection && COLLECTION_METHODS.contains(method)) {return super.getMethod(obj, method, args);}return null;}public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {return null;}public JexlPropertySet getPropertySet(final List resolvers, final Object obj, final Object identifier, final Object arg) {return null;}model.put("group", anyObjectDataBinder.getAnyObjectTO((AnyObject) any, true));model.put("anyObject", anyObjectDataBinder.getAnyObjectTO((AnyObject) any, true));