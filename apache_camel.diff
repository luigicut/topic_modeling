public class JMXAgentPropertiesTest extends JMXAgentTest {protected int getPort() {return 20009;}public class JMXAgentPropertiesTest extends DefaultJMXAgentTest {public class JMXAgentTest extends DefaultJMXAgentTest {protected final String jmxServiceUrl = "service:jmx:rmi:///jndi/rmi://localhost:" + getPort() + "/jmxrmi/camel";protected JMXConnector clientConnector;protected int getPort() {return 20008;}public void tearDown() throws Exception {if (clientConnector != null) {try {clientConnector.close();} catch (Exception e) {// ignore}clientConnector = null;}super.tearDown();}protected AbstractXmlApplicationContext createApplicationContext() {return new ClassPathXmlApplicationContext("org/apache/camel/spring/jmxConfig.xml");}protected MBeanServerConnection getMBeanConnection() throws Exception {if (mbsc == null) {if (clientConnector == null) {clientConnector = JMXConnectorFactory.connect(new JMXServiceURL(jmxServiceUrl), null);}mbsc = clientConnector.getMBeanServerConnection();}return mbsc;}Licensed to the Apache Software Foundation (ASF) under one or morecontributor license agreements.  See the NOTICE file distributed withthis work for additional information regarding copyright ownership.The ASF licenses this file to You under the Apache License, Version 2.0(the "License"); you may not use this file except in compliance withthe License.  You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.<beans xmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"><jmxAgent id="agent" registryPort="20008"usePlatformMBeanServer="true"createConnector="true"/><jmxAgent id="agent" registryPort="{{myjmx.port}}" disabled="{{myjmx.disabled}}"<jmxAgent id="agent" disabled="{{myjmx.disabled}}"createConnector="true"* Registers object with management infrastructure with a specific name. Object must be annotated or* Registers object with management infrastructure with a specific name. Object must be annotated or* Registers object with management infrastructure with a specific name. Object must be annotated or* Registers object with management infrastructure with a specific name. Object must be annotated or****/****/void setRegistryPort(Integer port);/****/Integer getRegistryPort();/*** Sets the port clients must use to connect**/void setConnectorPort(Integer port);/*** Gets the port clients must use to connect**/Integer getConnectorPort();/*** Sets the service url**/void setServiceUrlPath(String url);/*** Gets the service url**/String getServiceUrlPath();/*** Whether connector should be created, allowing clients to connect remotely**/void setCreateConnector(Boolean createConnector);/*** Whether connector is created, allowing clients to connect remotely**/Boolean getCreateConnector();* Sets whether to use host IP Address* Sets whether to use host IP Address"registryPort": { "kind": "attribute", "displayName": "Registry Port", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "1099", "description": "RMI connector registry port (default 1099)" },"connectorPort": { "kind": "attribute", "displayName": "Connector Port", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "-1", "description": "RMI connector server port (default -1 not used)" },"serviceUrlPath": { "kind": "attribute", "displayName": "Service Url Path", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "\/jmxrmi", "description": "JMX Service URL path (default \/jmxrmi)" },"createConnector": { "kind": "attribute", "displayName": "Create Connector", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "false", "description": "A flag that indicates whether the agent should be created" },if (camelJMXAgent.getConnectorPort() != null) {properties.put("connectorPort", CamelContextHelper.parseInteger(getContext(), camelJMXAgent.getConnectorPort()));}if (camelJMXAgent.getCreateConnector() != null) {properties.put("createConnector", CamelContextHelper.parseBoolean(getContext(), camelJMXAgent.getCreateConnector()));}if (camelJMXAgent.getRegistryPort() != null) {properties.put("registryPort", CamelContextHelper.parseInteger(getContext(), camelJMXAgent.getRegistryPort()));}if (camelJMXAgent.getServiceUrlPath() != null) {properties.put("serviceUrlPath", CamelContextHelper.parseText(getContext(), camelJMXAgent.getServiceUrlPath()));}private String registryPort;private String connectorPort;private String serviceUrlPath;private String createConnector;public String getRegistryPort() {return registryPort;}/*** RMI connector registry port (default 1099)*/public void setRegistryPort(String registryPort) {this.registryPort = registryPort;}public String getConnectorPort() {return connectorPort;}/*** RMI connector server port (default -1 not used)*/public void setConnectorPort(String connectorPort) {this.connectorPort = connectorPort;}public String getServiceUrlPath() {return serviceUrlPath;}/*** JMX Service URL path (default /jmxrmi)*/public void setServiceUrlPath(String serviceUrlPath) {this.serviceUrlPath = serviceUrlPath;}public String getCreateConnector() {return createConnector;}/*** A flag that indicates whether the agent should be created*/public void setCreateConnector(String createConnector) {this.createConnector = createConnector;}if (createConnector != null) {csb.append("createConnector=" + createConnector);}if (connectorPort != null) {csb.append("connectorPort=" + connectorPort);}if (registryPort != null) {csb.append("registryPort=" + registryPort);}if (serviceUrlPath != null) {csb.append("serviceUrlPath=" + serviceUrlPath);}case "jmxcreateconnector":case "JmxCreateConnector": target.setJmxCreateConnector(property(camelContext, boolean.class, value)); return true;{ "name": "camel.main.jmxCreateConnector", "description": "Whether JMX connector is created, allowing clients to connect remotely The default value is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean" },camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector());private boolean jmxCreateConnector;public boolean isJmxCreateConnector() {return jmxCreateConnector;}/*** Whether JMX connector is created, allowing clients to connect remotely** The default value is false.*/public void setJmxCreateConnector(boolean jmxCreateConnector) {this.jmxCreateConnector = jmxCreateConnector;}/*** Whether JMX connector is created, allowing clients to connect remotely** The default value is false.*/public T withJmxCreateConnector(boolean jmxCreateConnector) {this.jmxCreateConnector = jmxCreateConnector;return (T) this;}// jmx (rmi registry) portpublic static final String REGISTRY_PORT = "org.apache.camel.jmx.rmiConnector.registryPort";// jmx (rmi server connection) portpublic static final String CONNECTOR_PORT = "org.apache.camel.jmx.rmiConnector.connectorPort";// JMX service URL pathpublic static final String SERVICE_URL_PATH = "org.apache.camel.jmx.serviceUrlPath";// A flag that indicates whether the agent should be createdpublic static final String CREATE_CONNECTOR = "org.apache.camel.jmx.createRmiConnector";public static final int DEFAULT_REGISTRY_PORT = 1099;public static final int DEFAULT_CONNECTION_PORT = -1;public static final String DEFAULT_SERVICE_URL_PATH = "/jmxrmi/camel";private JMXConnectorServer cs;private Registry registry;private Integer registryPort = DEFAULT_REGISTRY_PORT;private Integer connectorPort = DEFAULT_CONNECTION_PORT;private String serviceUrlPath = DEFAULT_SERVICE_URL_PATH;private Boolean createConnector = false;if (System.getProperty(JmxSystemPropertyKeys.REGISTRY_PORT) != null) {registryPort = Integer.getInteger(JmxSystemPropertyKeys.REGISTRY_PORT);values.put(JmxSystemPropertyKeys.REGISTRY_PORT, registryPort);}if (System.getProperty(JmxSystemPropertyKeys.CONNECTOR_PORT) != null) {connectorPort = Integer.getInteger(JmxSystemPropertyKeys.CONNECTOR_PORT);values.put(JmxSystemPropertyKeys.CONNECTOR_PORT, connectorPort);}if (System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH) != null) {serviceUrlPath = System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH);values.put(JmxSystemPropertyKeys.SERVICE_URL_PATH, serviceUrlPath);}if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR);values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector);}if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR);values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector);}public void setRegistryPort(Integer port) {registryPort = port;}public Integer getRegistryPort() {return registryPort;}public void setConnectorPort(Integer port) {connectorPort = port;}public Integer getConnectorPort() {return connectorPort;}public void setServiceUrlPath(String url) {serviceUrlPath = url;}public String getServiceUrlPath() {return serviceUrlPath;}public void setCreateConnector(Boolean flag) {createConnector = flag;}public Boolean getCreateConnector() {return createConnector;}// close JMX Connector, if it was createdif (cs != null) {try {cs.stop();LOG.debug("Stopped JMX Connector");} catch (IOException e) {LOG.debug("Error occurred during stopping JMXConnectorService: "+ cs + ". This exception will be ignored.");}cs = null;}// Unexport JMX RMI registry, if it was createdif (registry != null) {try {UnicastRemoteObject.unexportObject(registry, true);LOG.debug("Unexported JMX RMI Registry");} catch (NoSuchObjectException e) {LOG.debug("Error occurred while unexporting JMX RMI registry. This exception will be ignored.");}}String hostName;boolean canAccessSystemProps = true;try {// we'll do it this way mostly to determine if we should lookup the hostNameSecurityManager sm = System.getSecurityManager();if (sm != null) {sm.checkPropertiesAccess();}} catch (SecurityException se) {canAccessSystemProps = false;}if (canAccessSystemProps) {try {if (useHostIPAddress) {hostName = InetAddress.getLocalHost().getHostAddress();} else {hostName = InetAddressUtil.getLocalHostName();}} catch (UnknownHostException uhe) {LOG.info("Cannot determine localhost name or address. Using default: {}", DEFAULT_REGISTRY_PORT, uhe);hostName = DEFAULT_HOST;}} else {hostName = DEFAULT_HOST;}try {// Create the connector if we needif (createConnector) {createJmxConnector(hostName);}} catch (IOException ioe) {LOG.warn("Could not create and start JMX connector.", ioe);}protected void createJmxConnector(String host) throws IOException {StringHelper.notEmpty(serviceUrlPath, "serviceUrlPath");ObjectHelper.notNull(registryPort, "registryPort");try {registry = LocateRegistry.createRegistry(registryPort);LOG.debug("Created JMXConnector RMI registry on port {}", registryPort);} catch (RemoteException ex) {// The registry may had been created, we could get the registry instead}// must start with leading slashString path = serviceUrlPath.startsWith("/") ? serviceUrlPath : "/" + serviceUrlPath;// Create an RMI connector and start itfinal JMXServiceURL url;if (connectorPort > 0) {url = new JMXServiceURL("service:jmx:rmi://" + host + ":" + connectorPort + "/jndi/rmi://" + host+ ":" + registryPort + path);} else {url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + host + ":" + registryPort + path);}cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);// use async thread for starting the JMX Connector// (no need to use a thread pool or enlist in JMX as this thread is terminated when the JMX connector has been started)String threadName = camelContext.getExecutorServiceManager().resolveThreadName("JMXConnector: " + url);Thread thread = getCamelContext().getExecutorServiceManager().newThread(threadName, () -> {try {LOG.debug("Staring JMX Connector thread to listen at: {}", url);cs.start();LOG.info("JMX Connector thread started and listening at: {}", url);} catch (IOException ioe) {LOG.warn("Could not start JMXConnector thread at: " + url + ". JMX Connector not in use.", ioe);}});thread.start();}System.setProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR, "true");System.setProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR, "true");System.clearProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR);System.clearProperty(JmxSystemPropertyKeys.REGISTRY_PORT);public class JmxInstrumentationWithConnectorTest extends JmxInstrumentationUsingDefaultsTest {protected String url;protected JMXConnector clientConnector;protected int registryPort;protected boolean useJmx() {return true;}protected boolean canRunOnThisPlatform() {String os = System.getProperty("os.name");boolean aix = os.toLowerCase(Locale.ENGLISH).contains("aix");boolean windows = os.toLowerCase(Locale.ENGLISH).contains("windows");boolean solaris = os.toLowerCase(Locale.ENGLISH).contains("sunos");// Does not work on AIX / solaris and the problem is hard to identify, could be issues not allowing to use a custom port// java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.NameNotFoundException: jmxrmi/camel// windows CI servers is often slow/tricky so skip as wellreturn !aix && !solaris && !windows;}public void setUp() throws Exception {registryPort = 30000 + new Random().nextInt(10000);log.info("Using port " + registryPort);url = "service:jmx:rmi:///jndi/rmi://localhost:" + registryPort + "/jmxrmi/camel";// need to explicit set it to false to use non-platform mbsSystem.setProperty(JmxSystemPropertyKeys.USE_PLATFORM_MBS, "false");System.setProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR, "true");System.setProperty(JmxSystemPropertyKeys.REGISTRY_PORT, "" + registryPort);super.setUp();}public void tearDown() throws Exception {if (clientConnector != null) {try {clientConnector.close();} catch (Exception e) {// ignore}clientConnector = null;}// restore environment to original state// the following properties may have been set by specialization of this test classSystem.clearProperty(JmxSystemPropertyKeys.USE_PLATFORM_MBS);System.clearProperty(JmxSystemPropertyKeys.DOMAIN);System.clearProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN);System.clearProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR);System.clearProperty(JmxSystemPropertyKeys.REGISTRY_PORT);super.tearDown();}protected MBeanServerConnection getMBeanConnection() throws Exception {if (mbsc == null) {if (clientConnector == null) {clientConnector = JMXConnectorFactory.connect(new JMXServiceURL(url), null);}mbsc = clientConnector.getMBeanServerConnection();}return mbsc;}public void testRmiRegistryUnexported() throws Exception {Registry registry = LocateRegistry.getRegistry(registryPort);// before we stop the context the registry is still exported, so list() should workException e;try {registry.list();e = null;} catch (NoSuchObjectException nsoe) {e = nsoe;}assertNull(e);// stop the Camel contextcontext.stop();// stopping the Camel context unexported the registry, so list() should failException e2;try {registry.list();e2 = null;} catch (NoSuchObjectException nsoe) {e2 = nsoe;}assertNotNull(e2);}context.getManagementStrategy().getManagementAgent().setCreateConnector(true);public void setUp() throws Exception {System.setProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR, "true");super.setUp();}public void tearDown() throws Exception {System.clearProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR);super.tearDown();}public class ManagedServiceUrlPathTest extends ManagementTestSupport {private static final String JMXSERVICEURL = "service:jmx:rmi:///jndi/rmi://localhost:2113/foo/bar";private JMXConnector clientConnector;protected CamelContext createCamelContext() throws Exception {CamelContext context = super.createCamelContext();// START SNIPPET: e1context.getManagementStrategy().getManagementAgent().setServiceUrlPath("/foo/bar");context.getManagementStrategy().getManagementAgent().setRegistryPort(2113);context.getManagementStrategy().getManagementAgent().setCreateConnector(true);// END SNIPPET: e1return context;}protected boolean canRunOnThisPlatform() {// does not work well when maven surefire plugin is set to forkmode=oncereturn false;}public void tearDown() throws Exception {super.tearDown();try {if (clientConnector != null) {clientConnector.close();}} catch (Throwable e) {// ignore}}public void testConnectToJmx() throws Exception {// JMX tests dont work well on AIX CI servers (hangs them)if (isPlatform("aix")) {return;}clientConnector = JMXConnectorFactory.connect(new JMXServiceURL(JMXSERVICEURL), null);MBeanServerConnection mbeanServer = clientConnector.getMBeanServerConnection();ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://start\"");String uri = (String) mbeanServer.getAttribute(name, "EndpointUri");assertEquals("direct://start", uri);name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"log://foo\"");uri = (String) mbeanServer.getAttribute(name, "EndpointUri");assertEquals("log://foo", uri);name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://result\"");uri = (String) mbeanServer.getAttribute(name, "EndpointUri");assertEquals("mock://result", uri);String id = (String) mbeanServer.getAttribute(name, "CamelId");assertEquals("camel-1", id);Boolean singleton = (Boolean) mbeanServer.getAttribute(name, "Singleton");assertEquals(Boolean.TRUE, singleton);}protected RouteBuilder createRouteBuilder() throws Exception {return new RouteBuilder() {public void configure() throws Exception {from("direct:start").to("log:foo").to("mock:result");}};}protected int registryPort;protected String url;public void setUp() throws Exception {registryPort = AvailablePortFinder.getNextAvailable();log.info("Using port " + registryPort);// need to explicit set it to false to use non-platform mbsSystem.setProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR, "true");System.setProperty(JmxSystemPropertyKeys.REGISTRY_PORT, "" + registryPort);super.setUp();}The InfluxDB component supports 2 options, which are listed below.The InfluxDB component supports 3 options, which are listed below.| *influxDB* (producer) | The shared Influx DB to use for all endpoints |  | InfluxDBThe Nats component supports 5 options, which are listed below.The Nats component supports 6 options, which are listed below.| *verbose* (common) | Whether or not running in verbose mode | false | boolean| *pedantic* (common) | Whether or not running in pedantic mode (this affects performace) | false | boolean| *pedantic* (common) | Whether or not running in pedantic mode (this affects performance) | false | booleanStarting in next release (1.5), the defaultStarting from the 1.5 release, the defaultStarting from Camel 3.2.0, the configuration in this section no longer applies.Starting from Camel 3.2.0, the configuration in this section no longer applies.|`createConnector` |`org.apache.camel.jmx.createRmiConnect` |`false` |If|*Removed in 3.2.0:* `createConnector` |`org.apache.camel.jmx.createRmiConnect` |`false` |If|`registryPort` |`org.apache.camel.jmx.rmiConnector.registryPort`|*Removed in 3.2.0:* `registryPort` |`org.apache.camel.jmx.rmiConnector.registryPort`|`connectorPort` |`org.apache.camel.jmx.rmiConnector.connectorPort` |-1|*Removed in 3.2.0:* `connectorPort` |`org.apache.camel.jmx.rmiConnector.connectorPort` |-1|`serviceUrlPath` |`org.apache.camel.jmx.serviceUrlPath`|*Removed in 3.2.0:* `serviceUrlPath` |`org.apache.camel.jmx.serviceUrlPath`private boolean jmxCreateConnector;public boolean isJmxCreateConnector() {return jmxCreateConnector;}/*** Whether JMX connector is created, allowing clients to connect remotely* The default value is false.*/public void setJmxCreateConnector(boolean jmxCreateConnector) {this.jmxCreateConnector = jmxCreateConnector;}